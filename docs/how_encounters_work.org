#+title: How Encounters Work


The main idea is just the environment decides which creatures are spawn.
I create the spawns based on tilesets and try to get some clues from the area name.
For example, if the area has the string forest in it, then I assume is a forest and spawn
creatures that live in a forest, using the encounters table, the same happens when the tileset matches forest or the environment.
Today only these environments are valid:

         - FOREST
         - RUINS
         - CAVES
         - HAUNTED
         - CITY_EXTERIOR
         - CITY_INTERIOR
         - DUNGEON
         - CRYPT
         - DESERT
         - FROZEN
         - UNDERDARK
         - SEWERS

Environments live in the following table

#+begin_src emacs-lisp
(let ((sql-database "~/Projects/nwn/dnd35/database/dnd35.sqlite3"))
  (sqlite-select sql-database "select * from creatures limit 2;" ))

#+end_src

#+RESULTS:
: #<buffer *SQL: SQLite*>


#+begin_src sql
 PRAGMA foreign_keys = OFF;
drop table if exists  Environments;
drop table if exists Encounters;
PRAGMA foreign_keys = ON;

 -- Environments Table
CREATE TABLE IF NOT EXISTS Environments (
    EnvironmentID INTEGER PRIMARY KEY,
    Name TEXT	CHECK( Name  IN  ("FOREST",
	                              "CAVES",
								  "CITY_EXTERIOR",
					              "CITY_INTERIOR",
					              "CRYPT",
  							      "DESERT",
								  "SEWER",
								  "FROZEN",
								  "DUNGEON",
  								  "UNDERDARK",
 								  "RUINS",
								  "HAUNTED") )
);

 -- Adding environments
 INSERT INTO Environments ( Name ) values
 ("CAVES"), ( "FOREST") ,("RUINS"), ("HAUNTED"),("CITY_EXTERIOR"), ("CITY_INTERIOR"),
 ("DUNGEON"),("CRYPT"), ("DESERT"), ("FROZEN"), ("UNDERDARK"), ("SEWER");

#+end_src
Encounters is this table, creatures tables is the one that nwn_sqlite produces
#+begin_src sql
 CREATE TABLE IF NOT EXISTS Encounters (
    EncounterID INTEGER PRIMARY KEY,
    LVL INTEGER,
    CreatureID INTEGER,
    EnvironmentID INTEGER,
    FOREIGN KEY (CreatureID) REFERENCES creatures(id),
    FOREIGN KEY (EnvironmentID) REFERENCES Environments(EnvironmentID)
);
#+end_src


To search for an encounter just join between encounters, creatures and environments
#+begin_src  sql
SELECT
 TemplateResRef
FROM Encounters
JOIN Creatures ON Encounters.CreatureID = Creatures.id and Encounters.LVL > 10
JOIN Environments ON Encounters.EnvironmentID = Environments.EnvironmentID
WHERE Environments.Name = 'FOREST' order by random() limit 1;
#+end_src

The whole setup
#+begin_src
PRAGMA foreign_keys = OFF;
drop table if exists  Environments;
drop table if exists Encounters;
PRAGMA foreign_keys = ON;

 -- Environments Table
CREATE TABLE IF NOT EXISTS Environments (
    EnvironmentID INTEGER PRIMARY KEY,
    Name TEXT	CHECK( Name  IN  ("FOREST",
	                                                                   "CAVES",
																	   "CITY_EXTERIOR",
																	   "CITY_INTERIOR",
																	   "CRYPT",
																	   "DESERT",
																	   "SEWER",
																	   "FROZEN",
																	   "DUNGEON",
																	   "UNDERDARK",
																	   "RUINS",
																	   "HAUNTED") )
);

 -- Adding environments
 INSERT INTO Environments ( Name ) values
 ("CAVES"), ( "FOREST") ,("RUINS"), ("HAUNTED"),("CITY_EXTERIOR"), ("CITY_INTERIOR"),
 ("DUNGEON"),("CRYPT"), ("DESERT"), ("FROZEN"), ("UNDERDARK"), ("SEWER");
select * from Environments;

 CREATE TABLE IF NOT EXISTS Encounters (
    EncounterID INTEGER PRIMARY KEY,
    LVL INTEGER,
   CreatureID INTEGER,
   EnvironmentID INTEGER,
    FOREIGN KEY (CreatureID) REFERENCES creatures(id),
    FOREIGN KEY (EnvironmentID) REFERENCES Environments(EnvironmentID)
);


SELECT 
 TemplateResRef
FROM Encounters
JOIN Creatures ON Encounters.CreatureID = Creatures.id and Encounters.LVL > 10
JOIN Environments ON Encounters.EnvironmentID = Environments.EnvironmentID
WHERE Environments.Name = 'FOREST' order by random() limit 1;

#+end_src


Now populate some Forest encounters

#+begin_src sql
-- wolves
--insert into Encounters
--select   NULL, ChallengeRating, id, 2  from creatures where FirstName like '%wolf%';

-- bears
insert into Encounters
select   NULL, ChallengeRating, id, 2  from creatures where FirstName like '%bear%';
-- spiders
insert into Encounters
select NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%spider%';

-- goblins
insert into Encounters
select NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%goblin%';

-- orc
insert into Encounters
select NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%orc%';
-- gnoll
insert into Encounters
select NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%gnoll%';

--treant
insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%treant%';

-- satyr
insert into Encounters
select NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%satyr%';

-- pixie
insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%pixie%' and _FactionName = 'Hostile';
-- Nymph
insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%nymph%' and _FactionName = 'Hostile';


insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%boar%'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%hill%'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%green dragon Adult'
                            and _FactionName = 'Hostile';


insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%worg%'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%beetle%'
                            and _FactionName = 'Hostile';


insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%leech%'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%Rat'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%frog%'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%badger%'
                            and _FactionName = 'Hostile';


insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%eagle%'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%scorpion%'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%hawk%'
                            and _FactionName = 'Hostile';


insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%lizard%'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%crab%'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%wasp%'
                            and _FactionName = 'Hostile';

insert into Encounters
select  NULL,  ChallengeRating, id , 2 from creatures where FirstName like '% ant%'
                            and _FactionName = 'Hostile';



--select  FirstName, NULL,  ChallengeRating, id , 2 from creatures where FirstName like '%trap%'
 --                           and _FactionName = 'Hostile';

select * from Environments;
#+end_src


How to create the same Dnd encounter table that we see

| id | encounter_tablename | table_id |
|  1 | forest_goblins      |        1 |


| id | creature | quantity | encounter_table_id|
